# .github/workflows/update-wallpaper-json.yml
name: Update Wallpaper JSON

on:
  push:
    branches: [ main ]
    paths: 
      - 'wallpapers/**'  # Watch the wallpapers folder
  workflow_dispatch:

jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for accurate git log
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Debug - List files
      run: |
        echo "Files in root directory:"
        ls -la
        echo ""
        echo "Files in wallpapers directory:"
        ls -la wallpapers/ || echo "wallpapers directory not found"
        echo ""
        echo "Image files found in wallpapers:"
        find ./wallpapers -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.gif" \) 2>/dev/null || echo "No image files found"
        
    - name: Generate wallpaper.json
      run: |
        # Create the JSON generation script
        cat > generate_json.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');
        
        const WALLPAPER_DIR = './wallpapers'; // Your actual wallpapers folder
        const OUTPUT_FILE = './wallpapers.json'; // Changed to wallpapers.json (plural)
        const BASE_URL = 'https://raw.githubusercontent.com/Tareq4322/my-walls/main/wallpapers/';
        
        // Supported image extensions
        const IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];
        
        function generateWallpaperJson() {
          try {
            // Check if wallpapers directory exists
            if (!fs.existsSync(WALLPAPER_DIR)) {
              console.error('Wallpapers directory does not exist:', WALLPAPER_DIR);
              process.exit(1);
            }
            
            // Read the wallpapers directory
            const files = fs.readdirSync(WALLPAPER_DIR);
            
            // Filter image files and exclude system files
            const imageFiles = files.filter(file => {
              const ext = path.extname(file).toLowerCase();
              return IMAGE_EXTENSIONS.includes(ext) && !file.startsWith('.');
            });
            
            console.log('Found image files:', imageFiles); // Debug log
            
            // Get the upload date for each file from Git history
            const filesWithUploadDate = [];
            
            for (const file of imageFiles) {
              try {
                // Get the first commit date when this file was added to Git
                const gitCommand = `git log --follow --format="%ct" --diff-filter=A -- "wallpapers/${file}"`;
                const result = execSync(gitCommand, { encoding: 'utf8' }).trim();
                
                // Get the first (oldest) commit timestamp for this file
                const timestamps = result.split('\n').filter(t => t.trim());
                const firstCommitTimestamp = timestamps[timestamps.length - 1]; // Last in the list is the first commit
                
                if (firstCommitTimestamp) {
                  const uploadDate = new Date(parseInt(firstCommitTimestamp) * 1000);
                  filesWithUploadDate.push({
                    name: file,
                    uploadDate: uploadDate
                  });
                  console.log(`${file} was uploaded on: ${uploadDate.toISOString()}`);
                } else {
                  // If no git history found, use current date (newly added files)
                  const currentDate = new Date();
                  filesWithUploadDate.push({
                    name: file,
                    uploadDate: currentDate
                  });
                  console.log(`${file} has no git history, treating as new upload: ${currentDate.toISOString()}`);
                }
              } catch (error) {
                console.log(`Error getting git history for ${file}, treating as new upload`);
                filesWithUploadDate.push({
                  name: file,
                  uploadDate: new Date()
                });
              }
            }
            
            // Sort by upload date (NEWEST FIRST) - This is the key change!
            filesWithUploadDate.sort((a, b) => b.uploadDate - a.uploadDate);
            
            console.log('Files sorted by upload date (newest first):');
            filesWithUploadDate.forEach((file, index) => {
              console.log(`${index + 1}. ${file.name} (uploaded: ${file.uploadDate.toISOString()})`);
            });
            
            // Generate the JSON structure with numbered names based on upload order
            // Keep newest first in array, but give it the highest number
            const wallpapers = filesWithUploadDate.map((file, index) => ({
              name: `No.${filesWithUploadDate.length - index}`, // Reverse numbering: newest gets highest number
              url: BASE_URL + encodeURIComponent(file.name) // URL encode the filename
            }));
            
            // Your app expects a simple array, not an object
            const jsonData = wallpapers;
            
            // Write to file
            fs.writeFileSync(OUTPUT_FILE, JSON.stringify(jsonData, null, 2));
            console.log(`Generated ${OUTPUT_FILE} with ${wallpapers.length} wallpapers`);
            console.log('Final numbering (newest = highest number):', wallpapers.map(w => `${w.name}: ${decodeURIComponent(w.url.split('/').pop())}`).join(', '));
            console.log('JSON content:', JSON.stringify(jsonData, null, 2)); // Debug log
            
          } catch (error) {
            console.error('Error generating wallpaper.json:', error);
            process.exit(1);
          }
        }
        
        generateWallpaperJson();
        EOF
        
        # Run the script
        node generate_json.js
        
        # Clean up the script file
        rm generate_json.js
        
    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add wallpapers.json (ignore the generate_json.js script)
        git add wallpapers.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update wallpapers.json [skip ci]"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        fi
